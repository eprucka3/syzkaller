#/bin/bash

# LIZ TODO: Pass these in/set these from build file
ROOT=/syzkaller/managers/ci2-cuttlefish-5-10/kernel-build-test
DIST_DIR=${ROOT}/common
MODULES_STAGING_DIR=${DIST_DIR}/staging

# Add prebuilts to path
export PATH=$PATH:/syzkaller/managers/ci2-cuttlefish-5-10/kernel-build-test/prebuilts/kernel-build-tools/linux-x86/bin/

# $1 MODULES_STAGING_DIR    <The directory to look for all the compiled modules>
# $2 IMAGE_STAGING_DIR  <The destination directory in which MODULES_LIST is
#                        expected, and it's corresponding modules.* files>
function create_modules_staging() {
  local src_dir=$(echo $1/lib/modules/*)
  local version=$(basename "${src_dir}")
  local dest_dir=$2/lib/modules/${version}
  local dest_stage=$2

  rm -rf ${dest_dir}
  mkdir -p ${dest_dir}/kernel
  find ${src_dir}/kernel/ -maxdepth 1 -mindepth 1 \
    -exec cp -r {} ${dest_dir}/kernel/ \;
  # The other modules.* files will be generated by depmod
  cp ${src_dir}/modules.order ${dest_dir}/modules.order
  cp ${src_dir}/modules.builtin ${dest_dir}/modules.builtin

  # Re-run depmod to detect any dependencies between in-kernel and externel
  # modules. The, create modules.order based on all the modules compiled.
  run_depmod ${dest_stage} "" "${version}"
  cp ${dest_dir}/modules.order ${dest_dir}/modules.load
}

# $1 directory of kernel modules ($1/lib/modules/x.y)
# $2 kernel version
function run_depmod() {
  (
    local ramdisk_dir=$1
    local DEPMOD_OUTPUT

    cd ${ramdisk_dir}
    if ! DEPMOD_OUTPUT="$(depmod $2 -F ${DIST_DIR}/System.map -b . $3 2>&1)"; then
      echo "$DEPMOD_OUTPUT" >&2
      exit 1
    fi
    echo "$DEPMOD_OUTPUT"
    if { echo "$DEPMOD_OUTPUT" | grep -q "needs unknown symbol"; }; then
      echo "ERROR: kernel module(s) need unknown symbol(s)" >&2
      exit 1
    fi
  )
}

function create_initramfs() {
  create_modules_staging ${MODULES_STAGING_DIR} ${MODULES_STAGING_DIR}/initramfs_staging

  local modules_root_dir=$(echo ${MODULES_STAGING_DIR}/initramfs_staging/lib/modules/*)

  cp ${modules_root_dir}/modules.load ${DIST_DIR}/modules.load
  cp ${modules_root_dir}/modules.load ${DIST_DIR}/vendor_boot.modules.load

  mkbootfs ${MODULES_STAGING_DIR}/initramfs_staging >${MODULES_STAGING_DIR}/initramfs.cpio
  lz4 -c -l -12 --favor-decSpeed ${MODULES_STAGING_DIR}/initramfs.cpio >${DIST_DIR}/initramfs.img
}

function zip_kernel_headers() {
  KERNEL_HEADERS_TAR=${DIST_DIR}/kernel-headers.tar.gz
  echo " Copying kernel headers to ${KERNEL_HEADERS_TAR}"
  pushd $ROOT_DIR/$KERNEL_DIR
    find arch include $OUT_DIR -name *.h -print0               \
            | tar -czf $KERNEL_HEADERS_TAR                     \
              --absolute-names                                 \
              --dereference                                    \
              --transform "s,.*$OUT_DIR,,"                     \
              --transform "s,^,kernel-headers/,"               \
              --null -T -
  popd
}
