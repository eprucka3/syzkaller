#!/bin/bash

# $1 MODULES_STAGING_DIR    <The directory to look for all the compiled modules>
# $2 IMAGE_STAGING_DIR  <The destination directory in which MODULES_LIST is
# $3 OUT_DIR; output directory
#                        expected, and it's corresponding modules.* files>
function create_modules_staging() {
  local src_dir=$(echo $1/lib/modules/*)
  local version=$(basename "${src_dir}")
  local dest_dir=$2/lib/modules/${version}
  local dest_stage=$2
  local out_dir=$3

  rm -rf ${dest_dir}
  mkdir -p ${dest_dir}/kernel
  find ${src_dir}/kernel/ -maxdepth 1 -mindepth 1 \
    -exec cp -r {} ${dest_dir}/kernel/ \;
  # The other modules.* files will be generated by depmod
  cp ${src_dir}/modules.order ${dest_dir}/modules.order
  cp ${src_dir}/modules.builtin ${dest_dir}/modules.builtin

  # Re-run depmod to detect any dependencies between in-kernel and externel
  # modules. The, create modules.order based on all the modules compiled.
  run_depmod ${dest_stage} "${version}" ${out_dir}
  cp ${dest_dir}/modules.order ${dest_dir}/modules.load
}

# $1 directory of kernel modules ($1/lib/modules/x.y)
# $2 kernel version
# $3 OUT_DIR; output directory
function run_depmod() {
  (
    local ramdisk_dir=$1
    local DEPMOD_OUTPUT

    cd ${ramdisk_dir}
    if ! DEPMOD_OUTPUT="$(depmod -F $3/System.map -b . $2 2>&1)"; then
      echo "$DEPMOD_OUTPUT" >&2
      exit 1
    fi
    echo "$DEPMOD_OUTPUT"
    if { echo "$DEPMOD_OUTPUT" | grep -q "needs unknown symbol"; }; then
      echo "ERROR: kernel module(s) need unknown symbol(s)" >&2
      exit 1
    fi
  )
}

# $1 OUT_DIR; output directory
function create_initramfs() {
  local out_dir=$1
  local modules_staging_dir=${out_dir}/staging
  create_modules_staging ${modules_staging_dir} ${modules_staging_dir}/initramfs_staging ${out_dir}

  local modules_root_dir=$(echo ${modules_staging_dir}/initramfs_staging/lib/modules/*)

  cp ${modules_root_dir}/modules.load ${out_dir}/modules.load
  cp ${modules_root_dir}/modules.load ${out_dir}/vendor_boot.modules.load

  mkbootfs ${modules_staging_dir}/initramfs_staging >${modules_staging_dir}/initramfs.cpio
  lz4 -c -l -12 --favor-decSpeed ${modules_staging_dir}/initramfs.cpio >${out_dir}/initramfs.img
}

# $1 Kernel common dir
function zip_kernel_headers() {
  local kernel_common_dir=$1
  KERNEL_HEADERS_TAR=${kernel_common_dir}/kernel-headers.tar.gz
  echo " Copying kernel headers to ${KERNEL_HEADERS_TAR}"
  pushd $kernel_common_dir
    find arch include $out_dir -name *.h -print0               \
            | tar -czf $KERNEL_HEADERS_TAR                     \
              --absolute-names                                 \
              --dereference                                    \
              --transform "s,.*$kernel_common_dir,,"                     \
              --transform "s,^,kernel-headers/,"               \
              --null -T -
  popd
}

# Call specified input function
if declare -f "$1" > /dev/null
then
  # Pass arguments to function
  "$@"
else
  echo "'$1' is not a valid function" >&2
  exit 1
fi
